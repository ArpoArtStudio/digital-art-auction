"use client"

import React, { useState, useRef, useEffect } from "react"
import { format } from "date-fns"
import { X, Send, MoreVertical, Trash, VolumeX, Download } from "lucide-react"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { ScrollArea } from "@/components/ui/scroll-area"
import { useChatContext, ChatMessage } from "@/contexts/chat-context"
import { useWallet } from "@/contexts/wallet-context"
import { useBiddingContext, BiddingLevel } from "@/contexts/bidding-context"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"

export function ChatWindow() {
  const { 
    isOpen, 
    toggleChat, 
    messages, 
    sendMessage, 
    deleteMessage,
    muteUser,
    exportChatHistory,
    isConnected,
    chatUsers,
    isTyping,
    setIsTyping
  } = useChatContext()
  
  const { isConnected: walletConnected, isAdmin, connectWallet } = useWallet()
  const { userLevel, getLevelColor, getLevelName, getLevelBadge } = useBiddingContext()
  const [messageText, setMessageText] = useState("")
  const [activeMuteWallet, setActiveMuteWallet] = useState("")
  const [muteDuration, setMuteDuration] = useState("10")
  const messagesEndRef = useRef<HTMLDivElement>(null)

  // Scroll to bottom when messages change
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: "smooth" })
    }
  }, [messages])

  // Handle when user is typing
  useEffect(() => {
    if (messageText) {
      setIsTyping(true)
      const timeout = setTimeout(() => setIsTyping(false), 1000)
      return () => clearTimeout(timeout)
    } else {
      setIsTyping(false)
    }
  }, [messageText, setIsTyping])

  // If chat is not open, don't render anything
  if (!isOpen) return null
  
  const handleSendMessage = () => {
    if (!messageText.trim()) return
    sendMessage(messageText)
    setMessageText("")
  }

  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter") {
      handleSendMessage()
    }
  }

  const handleMuteUser = () => {
    muteUser(activeMuteWallet, parseInt(muteDuration))
    setActiveMuteWallet("")
  }

  const formatMessageTime = (timestamp: string) => {
    return format(new Date(timestamp), "h:mm a")
  }

  return (
    <div className="fixed bottom-24 right-6 z-50 w-80 sm:w-96 shadow-xl max-h-[70vh] flex flex-col rounded-lg border bg-card text-card-foreground">
      <div className="p-4 border-b flex flex-row items-center justify-between">
        <div className="flex items-center space-x-2">
          <div className="text-lg font-semibold">Auction Chat</div>
          {isConnected && (
            <Badge variant="outline" className="text-xs">
              {chatUsers.size} online
            </Badge>
          )}
        </div>
        <Button
          variant="ghost"
          size="icon"
          className="h-8 w-8 rounded-full"
          onClick={toggleChat}
        >
          <X className="h-4 w-4" />
        </Button>
      </div>
      
      <Tabs defaultValue="chat" className="flex-1 flex flex-col">
        <div className="px-4 py-1 border-b">
          <TabsList className="w-full">
            <TabsTrigger value="chat" className="flex-1">Chat</TabsTrigger>
            {isAdmin && <TabsTrigger value="admin" className="flex-1">Admin</TabsTrigger>}
          </TabsList>
        </div>
        
        <TabsContent value="chat" className="flex-1 flex flex-col max-h-[calc(70vh-120px)] p-0 m-0">
          {!walletConnected ? (
            <div className="flex items-center justify-center h-full text-center p-8">
              <div className="flex flex-col items-center gap-4">
                <p className="text-sm text-muted-foreground">Connect your wallet to join the chat</p>
                <Button onClick={connectWallet}>Connect Wallet</Button>
              </div>
            </div>
          ) : (
            <ScrollArea className="flex-1 p-4">
              {messages.length === 0 ? (
                <div className="flex items-center justify-center h-full text-center text-sm text-muted-foreground p-8">
                  No messages yet. Start the conversation!
                </div>
              ) : (
              messages.map((message) => (
                <div key={message.id} className="mb-4">
                  <div className="flex items-end gap-2">
                    <div className="max-w-[80%] px-1 py-1">
                      <div className="flex items-center gap-2">
                        <span className={`text-xs font-medium ${message.isAdmin ? 'text-red-400' : getLevelColor(message.level || BiddingLevel.Newcomer)}`}>
                          {message.displayName}
                        </span>
                        {/* Level Badge */}
                        <Badge 
                          variant="outline" 
                          className={`text-[10px] h-4 border-0 ${message.isAdmin ? 'bg-red-400/10 text-red-400' : `${getLevelColor(message.level || BiddingLevel.Newcomer).replace('text-', 'bg-').replace('-400', '-400/10')}`}`}
                        >
                          {message.isAdmin ? 'Admin' : getLevelBadge(message.level || BiddingLevel.Newcomer)}
                        </Badge>
                      </div>
                      <p className="text-sm mt-1 text-white">{message.text}</p>
                    </div>
                    
                    <span className="text-xs text-muted-foreground">
                      {formatMessageTime(message.timestamp)}
                    </span>
                    
                    {isAdmin && (
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" size="sm" className="h-6 w-6 p-0">
                            <MoreVertical className="h-3 w-3" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuItem onClick={() => deleteMessage(message.id)}>
                            <Trash className="h-3 w-3 mr-2" />
                            Delete Message
                          </DropdownMenuItem>
                          <Dialog>
                            <DialogTrigger asChild>
                              <DropdownMenuItem
                                onSelect={(e) => {
                                  e.preventDefault()
                                  setActiveMuteWallet(message.walletAddress)
                                }}
                              >
                                <VolumeX className="h-3 w-3 mr-2" />
                                Mute User
                              </DropdownMenuItem>
                            </DialogTrigger>
                            <DialogContent>
                              <DialogHeader>
                                <DialogTitle>Mute User</DialogTitle>
                                <DialogDescription>
                                  Select how long to mute this user for.
                                </DialogDescription>
                              </DialogHeader>
                              <div className="grid gap-4 py-4">
                                <div className="grid gap-2">
                                  <Label htmlFor="wallet">User Wallet</Label>
                                  <Input
                                    id="wallet"
                                    value={message.walletAddress}
                                    readOnly
                                  />
                                </div>
                                <div className="grid gap-2">
                                  <Label htmlFor="duration">Duration (minutes)</Label>
                                  <Select
                                    value={muteDuration}
                                    onValueChange={setMuteDuration}
                                  >
                                    <SelectTrigger>
                                      <SelectValue placeholder="Select duration" />
                                    </SelectTrigger>
                                    <SelectContent>
                                      <SelectItem value="10">10 minutes</SelectItem>
                                      <SelectItem value="30">30 minutes</SelectItem>
                                      <SelectItem value="60">1 hour</SelectItem>
                                      <SelectItem value="1440">24 hours</SelectItem>
                                    </SelectContent>
                                  </Select>
                                </div>
                              </div>
                              <DialogFooter>
                                <Button variant="outline" onClick={() => setActiveMuteWallet("")}>
                                  Cancel
                                </Button>
                                <Button onClick={handleMuteUser}>Mute User</Button>
                              </DialogFooter>
                            </DialogContent>
                          </Dialog>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    )}
                  </div>
                </div>
              ))
            )}
            {isTyping && (
              <div className="text-xs text-muted-foreground animate-pulse">
                Someone is typing...
              </div>
            )}
            <div ref={messagesEndRef} />
          </ScrollArea>
          
          {walletConnected ? (
            <div className="p-3 border-t">
              <div className="flex gap-2">
                <Input
                  placeholder="Type a message"
                  value={messageText}
                  onChange={(e) => setMessageText(e.target.value)}
                  onKeyPress={handleKeyPress}
                  maxLength={500}
                  disabled={!isConnected}
                />
                <Button 
                  onClick={handleSendMessage}
                  disabled={!isConnected || !messageText.trim()}
                  size="icon"
                >
                  <Send className="h-4 w-4" />
                </Button>
              </div>
              <div className="flex justify-between text-xs mt-1">
                <span className="text-muted-foreground">
                  Max 500 characters, no links, max 5 emojis
                </span>
                <span className={`font-medium ${getLevelColor(userLevel)}`}>
                  {getLevelName(userLevel)} ({getLevelBadge(userLevel)})
                </span>
              </div>
            </div>
          ) : (
            <div className="p-3 border-t flex justify-center">
              <Button onClick={connectWallet} className="w-full">
                Connect Wallet to Chat
              </Button>
            </div>
          )}
        </TabsContent>
        
        {isAdmin && (
          <TabsContent value="admin" className="flex-1 flex flex-col max-h-[calc(70vh-120px)] p-0 m-0">
            <div className="p-4 space-y-4">
              <div className="flex items-center justify-between">
                <h4 className="text-sm font-semibold">Chat Management</h4>
                <Button 
                  size="sm" 
                  variant="outline"
                  onClick={exportChatHistory}
                  className="h-8 flex items-center"
                >
                  <Download className="h-3.5 w-3.5 mr-1" />
                  Export
                </Button>
              </div>
              
              <div className="space-y-2">
                <h5 className="text-xs font-semibold text-muted-foreground">Chat Statistics</h5>
                <div className="grid grid-cols-2 gap-2">
                  <div className="rounded-lg border p-3">
                    <div className="text-sm font-medium">Messages</div>
                    <div className="text-2xl font-bold">{messages.length}</div>
                  </div>
                  <div className="rounded-lg border p-3">
                    <div className="text-sm font-medium">Users</div>
                    <div className="text-2xl font-bold">{chatUsers.size}</div>
                  </div>
                </div>
              </div>
              
              <div className="flex justify-between items-center">
                <div className="text-xs text-muted-foreground">
                  Chat history is automatically deleted after 7 days
                </div>
                <div className="text-xs text-primary bg-primary/10 px-2 py-1 rounded">
                  Supabase Storage
                </div>
              </div>
            </div>
          </TabsContent>
        )}
      </Tabs>
    </div>
  )
}
